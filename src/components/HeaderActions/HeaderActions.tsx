import { useEffect, useRef, useState } from "react";
import { FaUserCircle } from "react-icons/fa";
import { useDispatch, useSelector } from "react-redux";
import { RootState } from "../../store";
import { toggleTheme } from "../../store/themeSlice";
import LoginForm from "../LoginForm/LoginForm";
import LogoutForm from "../LogoutForm/LogoutForm";
import styles from "./HeaderActions.module.scss";

export default function HeaderActions() {
  const dispatch = useDispatch();
  const theme = useSelector((state: RootState) => state.theme.theme);
  const { status } = useSelector((state: RootState) => state.auth);
  const [menuOpen, setMenuOpen] = useState(false);
  // –°—Å—ã–ª–∫–∞ –Ω–∞ DOM-—ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é (–Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å –∫–ª–∏–∫–∏ –≤–Ω–µ –Ω–µ–≥–æ)
  const menuRef = useRef<HTMLDivElement>(null);

  // –≠—Ñ—Ñ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –∫–ª–∏–∫–∞–º–∏ –≤–Ω–µ –º–µ–Ω—é
  useEffect(() => {
    // –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É
    const handleClickOutside = (event: MouseEvent) => {
      // –ï—Å–ª–∏ –∫–ª–∏–∫ –ø—Ä–æ–∏–∑–æ—à—ë–ª –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏ –º–µ–Ω—é ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setMenuOpen(false);
      }
    };

    // –ï—Å–ª–∏ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ ‚Äî –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É
    if (menuOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    } else {
      // –ï—Å–ª–∏ –º–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ ‚Äî —É–±–∏—Ä–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —É—Ç–µ—á–∫–∏)
      document.removeEventListener("mousedown", handleClickOutside);
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [menuOpen]); // –≠—Ñ—Ñ–µ–∫—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è menuOpen

  return (
    <div className={styles.actions} ref={menuRef}>
      <button
        className={styles.buttonLogin}
        onClick={() => setMenuOpen(!menuOpen)}
      >
        <FaUserCircle />
        {status}
      </button>
      <button
        className={styles.buttonTheme}
        onClick={() => dispatch(toggleTheme())}
      >
        {theme === "light" ? "‚òÄÔ∏è" : "üåô"}
      </button>
      {menuOpen && (
        <div className={styles.dropdownMenu}>
          {status ? (
            <LogoutForm onClose={() => setMenuOpen(false)}/>
          ) : (
            <LoginForm onClose={() => setMenuOpen(false)} />
          )}
        </div>
      )}
    </div>
  );
}
