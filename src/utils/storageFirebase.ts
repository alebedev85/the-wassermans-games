import {
  collection,
  deleteDoc,
  doc,
  getDoc,
  getDocs,
  setDoc,
  updateDoc,
} from "firebase/firestore";
import { db } from "../firebase"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Firebase
import { Task } from "../types";
import { store } from "../store"; 


// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞
const checkAdminAccess = () => {
  const state = store.getState();
  const isAdmin = state.auth.status;
  if (!isAdmin) {
    throw new Error("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ.");
  }
};

// –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
export const migrateOldCalendarData = async () => {
  const oldRef = doc(db, "calendar", "default");
  const snapshot = await getDoc(oldRef);

  if (!snapshot.exists()) return console.log("–ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏");

  const data = snapshot.data();
  const tasks = data?.tasks || [];

  console.log(`–ù–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);

  const tasksCollection = collection(db, "calendar/default/tasks");

  for (const task of tasks) {
    const taskRef = doc(tasksCollection, task.id);
    await setDoc(taskRef, task);
  }

  console.log("–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ");
};


// üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
export const getAllTasks = async (): Promise<Task[]> => {
  try {
    const tasksCol = collection(db, "calendar/default/tasks");
    const snapshot = await getDocs(tasksCol);

    console.log(`–í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ`);
    return snapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data()
    } as Task));
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á:", error);
    return [];
  }
};

// üîπ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
export const saveTaskInFB = async (task: Task): Promise<void> => {
  try {
    checkAdminAccess();
    const taskRef = doc(db, "calendar/default/tasks", task.id);
    await setDoc(taskRef, task);
    console.log(`–ó–∞–¥–∞—á–∞ ${task.id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${task.id}:`, error);
  }
};

// üîπ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
export const deleteTaskFromFB = async (taskId: string): Promise<void> => {
  try {
    checkAdminAccess();
    const taskRef = doc(db, "calendar/default/tasks", taskId);
    await deleteDoc(taskRef);
    console.log(`–ó–∞–¥–∞—á–∞ ${taskId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ ‚úÖ`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${taskId}:`, error);
  }
};

// üîπ –û–±–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç—å –ø–æ–ª–µ–π (–±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
export const updateTaskInFB = async (task: Task): Promise<void> => {
  try {
    checkAdminAccess();
    const taskRef = doc(db, "calendar/default/tasks", task.id);
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º task –≤ –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –±–µ–∑ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
    await updateDoc(taskRef, { ...task });
    console.log(`–ó–∞–¥–∞—á–∞ ${task.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${task.id}:`, error);
  }
};
